(deftype URI  [
  scheme (Maybe String)
  host (Maybe String)
  port (Maybe Int)
  path (Maybe String)
  query (Maybe String)
  user (Maybe String)
  password (Maybe String)
  fragment (Maybe String)
  opaque (Maybe String)
])

(defmodule URI
  (def default-ports {
    @"acap" 674,
    @"afp" 548,
    @"dict" 2628,
    @"dns" 53,
    @"ftp" 21,
    @"ftps" 990,
    @"git" 9418,
    @"gopher" 70,
    @"http" 80,
    @"https" 443,
    @"imap" 143,
    @"ipp" 631,
    @"ipps" 631,
    @"irc" 194,
    @"ircs" 6697,
    @"ldap" 389,
    @"ldaps" 636,
    @"mms" 1755,
    @"msrp" 2855,
    @"mtqp" 1038,
    @"nfs" 111,
    @"nntp" 119,
    @"nntps" 563,
    @"pop" 110,
    @"prospero" 1525,
    @"redis" 6379,
    @"rsync" 873,
    @"rtsp" 554,
    @"rtsps" 322,
    @"rtspu" 5005,
    @"scp" 22,
    @"sftp" 22,
    @"smb" 445,
    @"snmp" 161,
    @"ssh" 22,
    @"svn" 3690,
    @"telnet" 23,
    @"ventrilo" 3784,
    @"vnc" 5900,
    @"wais" 210,
    @"ws" 80,
    @"wss" 443,
  })

  (defn default-port [s]
    (Maybe.from (Maybe.apply s (fn [s] (Map.get &default-ports &s))) 0))

  (defn default-port? [u]
    (Maybe.from (Maybe.apply @(port u) (fn [p] (= p (default-port @(scheme u)))))
                false))

  (defn hostname [u]
    (Maybe.apply @(host u)
      (fn [h]
        (if (and (String.starts-with? &h "[") (String.ends-with? &h "]"))
          (String.substring &h 1 (Int.dec (length &h)))
          h))))

  (defn full-path [u]
    (let [q (Maybe.from @(query u) @"")]
      (String.concat &[(Maybe.from @(path u) @"/")
                       (if (String.empty? &q) @"" @"?")
                       q])))

  (defn absolute? [u] (Maybe.just? (scheme u)))
  (defn relative? [u] (Maybe.nothing? (scheme u)))

  (defn userinfo [u]
    (String.concat &[
      (Maybe.from @(user u) @"")
      @(if (Maybe.just? (password u)) ":" "")
      (Maybe.from @(password u) @"")
    ]))

  (defn str [u]
    (let [s @(scheme u)
          o @(opaque u)
          usr @(user u)
          q @(query u)
          h @(host u)
          p @(port u)
          pth @(path u)
          f @(fragment u)
         ]
      (String.concat &[
        (Maybe.from (Maybe.apply s
                        (fn [s] (String.concat &[
                                    s
                                    @":"
                                    @(if (Maybe.just? &o) "" "//")
                                ])))
                    @""
        )
        (Maybe.from o @"")
        (Maybe.from (Maybe.apply usr
                                 (fn [usr] (String.concat &[(userinfo u) @"@"])))
                    @""
        )
        (Maybe.from h @"")
        (Maybe.from (Maybe.apply p (fn [p] (if (default-port? u) @"" (str p))))
                    @""
        )
        (Maybe.from pth @"")
        (Maybe.from (Maybe.apply q (fn [q] (String.concat &[@"?" q]))) @"")
        (Maybe.from (Maybe.apply f (fn [f] (String.concat &[@"#" f]))) @"")
      ])
    )
  )

  (defn normalize [u]
    (assert "" "TODO"))

  (defn parse [s]
    (assert "" "TODO"))
)
